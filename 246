#include <stdio.h>
#include <string.h>
struct zz
{
    int start, end, len;
    int card[52];
};
typedef struct zz CARDS;
CARDS pile[7], hand;
int t, loop, dif;

int t_state[60], state[1500][60], s;

void initial();
void reduce(int i);
int main(void)
{
    int x, i, j, k;
    while(~scanf("%d", &t) && t)
    {
        memset(hand.card, 0, sizeof(hand.card));
        memset(state, 0, sizeof(state));
        s=0, dif=1;
        hand.card[0]=t;
        for(i=1; i<52; i++) scanf("%d", &hand.card[i]);
        hand.start=0, hand.end=51, hand.len=52;
        
        /*for(i=0; i<52; i++) printf("%d ", hand.card[i]);
        printf("\n");
        */
        initial();

        for(i=0; ;i++)
        {
            i = i%7;
            if(pile[i].len==0)  continue;
            loop++;
            pile[i].end=(pile[i].end+1)%52;
            pile[i].card[pile[i].end] = hand.card[hand.start];
            hand.start=(hand.start+1)%52;
            pile[i].len++, hand.len--;
            reduce(i);

            /*if(22<=loop && loop<25)
            {
                printf("i:%d\nloop:%d\nhand:", i, loop);
                for(j=0; j<hand.len; j++)   printf(" %d", hand.card[j+hand.start]);
                printf("\nhand start:%d  end:%d len:%d\n", hand.start, hand.end, hand.len);
                for(j=0; j<7; j++)
                {
                    printf("pile[%d]:", j);
                    for(k=0; k<pile[j].len; k++)
                        printf(" %d", pile[j].card[k+pile[j].start]);
                    printf("\npile len:%d start:%d end:%d\n", pile[j].len, pile[j].start, pile[j].end);
                }   
            }*/
            

            if(hand.len == 52)
            {
                printf("Win : %d\n", loop);
                break;
            }
            if(hand.len == 0)
            {
                printf("Loss: %d\n", loop);
                break;
            }

            /*draw check and store*/
            t=0;
            for(j=0; j<7; j++)
            {
                for(k=0; k<pile[j].len; k++)
                    t_state[t++]=pile[j].card[(k+pile[j].start)%52];
                t_state[t++]=-1;
            }
            for(j=0; j<hand.len; j++)
                t_state[t++]=hand.card[(j+hand.start)%52];
            t_state[t++]=-1;


            if(s>0)
            {
                if (s==1500) dif=0;
                else 
                    for(j=0; j<s; j++)
                    {
                        dif=0;
                        for(k=0; k<60; k++)
                        {
                            if(state[j][k]!=t_state[k])
                            {
                                dif=1;
                                break;
                            }
                        }
                        if(!dif)
                        {
                            printf("Draw: %d\n", loop);
                            break;
                        }
                    }
            }
            if(!dif)
                break;
            for(j=0; j<60; j++) state[s][j]=t_state[j];
            s++;
        }
    }
    return 0;
}
void reduce(int i)
{
    while(pile[i].len >=3)
    {
        if((pile[i].card[pile[i].start] + pile[i].card[(pile[i].start+1)%52] + pile[i].card[pile[i].end])%10 == 0)
        {
            hand.card[(hand.end+1)%52]=pile[i].card[pile[i].start];
            hand.card[(hand.end+2)%52]=pile[i].card[(pile[i].start+1)%52];
            hand.card[(hand.end+3)%52]=pile[i].card[pile[i].end];
            pile[i].start=(pile[i].start+2)%52, pile[i].end=(pile[i].end+51)%52, hand.end=(hand.end+3)%52;
            pile[i].len -= 3, hand.len += 3;
        }
        else if((pile[i].card[pile[i].start] + pile[i].card[(pile[i].end+51)%52] + pile[i].card[pile[i].end])%10 == 0)
        {
            hand.card[(hand.end+1)%52]=pile[i].card[pile[i].start];
            hand.card[(hand.end+2)%52]=pile[i].card[(pile[i].end+51)%52];
            hand.card[(hand.end+3)%52]=pile[i].card[pile[i].end];
            pile[i].start=(pile[i].start+1)%52, pile[i].end=(pile[i].end+50)%52, hand.end=(hand.end+3)%52;
            pile[i].len -= 3, hand.len += 3;
        }
        else if((pile[i].card[(pile[i].end+50)%52] + pile[i].card[(pile[i].end+51)%52] + pile[i].card[pile[i].end])%10 == 0)
        {
            hand.card[(hand.end+1)%52]=pile[i].card[(pile[i].end+50)%52];
            hand.card[(hand.end+2)%52]=pile[i].card[(pile[i].end+51)%52];
            hand.card[(hand.end+3)%52]=pile[i].card[pile[i].end];
            pile[i].end=(pile[i].end+49)%52, hand.end=(hand.end+3)%52;
            pile[i].len -= 3, hand.len += 3;
        }
        else    break;
    }
}
void initial()
{
    int i;
    for(i=0; i<7; i++)   
    {
        memset(pile[i].card, 0, sizeof(pile[i].card));
        pile[i].start=pile[i].end=pile[i].len=0;
    }

    for(i=0; i<7; i++)
    {
        pile[i].card[0]=hand.card[hand.start++];
        pile[i].start=pile[i].end=0, pile[i].len=1, hand.len--;
    }
    for(i=0; i<7; i++)
    {
        pile[i].card[++pile[i].end]=hand.card[hand.start++];
        pile[i].len++, hand.len--;
    }
    loop=14;
    /*printf("hand:");
    for(i=0; i<hand.len; i++)   printf(" %d", hand.card[i+hand.start]);
    printf("\nhand start:%d  len:%d\n", hand.start, hand.len);
    for(i=0; i<7; i++)  printf("pile[%d]:%d %d\tlen:%d\n", i, pile[i].card[0], pile[i].card[1], pile[i].len);
    */
}
