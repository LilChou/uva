#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int r, c, graph[7][7];
char state_dif[3][5];
int stack[50], s, ans[50], ans_n, flag;

int cmp(const void *a, const void *b)
{	return *((int*)a)-*((int*)b);	}


int dfs(int x, int y, int lit)
{
	int i, j, k, f=1, t;
	if(lit==r*c)
	{
		if(s<ans_n)
		{
			qsort(stack, s, sizeof(int), cmp);
			for(i=0; i<s; i++)
				ans[i]=stack[i];
			ans_n=s;
			flag=1;
		}
		else if(s==ans_n)
		{
			j=0;
			qsort(stack, s, sizeof(int), cmp);
			for(i=0; i<s; i++)
				if(stack[i]<ans[i])
				{
					j=1;
					break;
				}
				else if(stack[i]>ans[i])	break;
			if(j)
			{
				for(i=0; i<s; i++)
					ans[i]=stack[i];
				ans_n=s;
			}
		}
	}
	if(y==r+1) return 0;
	if(x==c+1)
	{
		for(j=1; j<y; j++)
		{
			for(i=1; i<=c; i++)
				if(!graph[i][j])	{f=0; break;}
			if(!f)	break;
		}
		if(!f)	return 0;
		if(dfs(1, y+1, lit))	return 1;
		return 0;
	}
	if(dfs(x+1, y, lit))	return 1;
	for(j=-1; j<=1; j++)
		for(i=-1; i<=1; i++)
		{
			if(x+i<1 || x+i>c)	continue;
			if(y+j<1 || y+j>r)	continue;
			if(state_dif[j+1][i+1]=='*')
			{
				t=graph[x+i][y+j];
				graph[x+i][y+j]=(t+1)%2;
				if(t==0)	lit++;
				else lit--;
			}
		}
	stack[s++]=x+(y-1)*c;
	if(dfs(x+1, y, lit))	return 1;
	s--;
	for(j=-1; j<2; j++)
		for(i=-1; i<2; i++)
		{
			if(x+i<1 || x+i>c)	continue;
			if(y+j<1 || y+j>r)	continue;
			if(state_dif[j+1][i+1]=='*')
			{
				t=graph[x+i][y+j];
				graph[x+i][y+j]=(t+1)%2;
				if(t==0)	lit++;
				else lit--;
			}
		}
	return 0;
}
int main()
{
	int cases=1, i;
	while(~scanf("%d%d", &r, &c) && r)
	{
		memset(graph, 0, sizeof(graph));
		memset(ans, 0, sizeof(ans));
		memset(stack, 0, sizeof(stack));
		memset(state_dif, 0 ,sizeof(state_dif));
		flag=s=0, ans_n=500;
		scanf("%s%s%s", state_dif[0], state_dif[1], state_dif[2]);
		printf("Case #%d\n", cases++);
		dfs(1, 1, 0);
		if(!flag)	printf("Impossible.\n");
		else
		{
			printf("%d", ans[0]);
			for(i=1; i<ans_n; i++)
				printf(" %d", ans[i]);
			printf("\n");
		}
	}
	return 0;
}
