#include <stdio.h>
#include <string.h>
int r, c, stack[50], s, flag;
char state_change[3][5];
void dfs(int n, int graph[7][7])
{
	int x, y, i, j, f=1;
	x=n, y=1;
	while(x>c)	
	{
		x -= c;
		y++;
	}
	if(n > r*c)	return ;
	/*--------------take n----------------*/
	for(j=-1; j<2; j++)
		for(i=-1; i<2; i++)
		{
			if(x+i<1 || x+i>c)	continue;
			if(y+j<1 || y+j>r)	continue;
			if(state_change[j+1][i+1]=='*')
				graph[x+i][y+j]=(graph[x+i][y+j]+1)%2;
		}

	stack[s++]=n;
	for(j=r; j>0; j--)
	{
		for(i=c; i>0; i--)
			if(!graph[i][j])	{f=0; break;}
		if(!f)	break;
	}
	if(f)
	{
		flag=1;
		printf("%d", stack[0]);
		for(i=1; i<s; i++)
			printf(" %d", stack[i]);
		printf("\n");
		return ;
	}
	dfs(n+1, graph);
	if(flag==1)	return ;
	/*--------------drop n----------------*/
	for(j=-1; j<2; j++)
		for(i=-1; i<2; i++)
		{
			if(x+i<1 || x+i>c)	continue;
			if(y+j<1 || y+j>r)	continue;
			if(state_change[j+1][i+1]=='*')
				graph[x+i][y+j]=(graph[x+i][y+j]+1)%2;
		}
	s--;
	dfs(n+1, graph);
}
int main()
{
	int cases=1, i, j, graph[7][7];
	char c_temp[5];
	while(~scanf("%d%d", &r, &c) && r)
	{
		memset(graph, 0, sizeof(graph));
		memset(state_change, 0, sizeof(state_change));
		memset(stack, 0, sizeof(stack));
		s = flag = 0;
		scanf("%s%s%s", state_change[0], state_change[1], state_change[2]);
		printf("Case #%d\n", cases++);
		dfs(1, graph);
		if(!flag)	printf("Impossible.\n");
	}
	return 0;
}
